name: CI
on:
#  push:
#     branches: [ develop ]
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, closed, deleted, reopened]
  workflow_dispatch:

jobs:
  jira:
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
    - name: Login Jira
      if: ${{ !steps.github-team-role.outputs.role }}
      uses: atlassian/gajira-login@v2.0.0
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    - name: Create task on jira
      if: ${{ !steps.github-team-role.outputs.role }}
      uses: atlassian/gajira-create@master
      with:
        project: ODINBE
        issuetype: "Task"
        summary: "${{ github.repository }}: ${{ github.event.issue.title || github.event.pull_request.title }} #${{ github.event.issue.number || github.event.pull_request.number }}"
        description: "${{ github.event.issue.body || github.event.pull_request.body }}\n\n_Created from GitHub Action for ${{ github.event.issue.html_url || github.event.pull_request.html_url }}, from ${{ github.actor }}_"

  build:
#    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 'Checkout GitHub Action' 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Setup Python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: 'Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install django-storages
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: 'Cache Python Setup'
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pip
      #     key: '${{ runner.os }}-pip-${{ hashfiles(''**/requirements.txt'') }}'
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      - name: Run Sonar for vulernability check in dependencies
        run: |
          pip install safety
          safety check --full-report
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SONAR_TOKEN: '${{ secrets.SONAR_API_TOKEN }}'
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: '${{ secrets.SNYK_TOKEN }}'
        with:
          command: monitor
      - name: Security check Bandit
        uses: libertyy/py3-bandit-check@v2
        env:
          TARGET_DIR: ./psan
#      - name: Security check report artifacts
#        uses: actions/upload-artifact@v1
#        if: failure()
#        with:
#          name: Security report
#          path: ${{ RUNNER.temp }}/_github_home/bandit_report.out
#      - name: Python Linter
#        uses: sunnysid3up/python-linter@master
#        if: failure()
#        with:
#          source: "src"
#          strict: "high"
#          mypy-options: "--ignore-missing-imports --show-error-codes"
#          pylint-options: "--rcfile=setup.cfg"
#          isort-options: "-w 100"
#          django: true
      - name: Generate coverage report
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          pip install pytest-cov
          pip install coverage
#          coverage run tests.py
#          pytest --cov=./
#          nosetest --with-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: '${{ secrets.CODECOV_TOKEN }}'
          file: ./coverage.xml
          flags: unittests
      - name: Slack Notification for Snyk
        uses: bryan-nice/slack-notification@master
        env:
          SLACK_INCOMING_WEBHOOK: '${{ secrets.SLACK_WEBHOOK }}'
          SLACK_TITLE: Build
          SLACK_MESSAGE: "Build success! workflow: ${{ github.workflow }} run id: ${{ github.run_id\t}}\t"
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - run: |
          DOCKER_BUILDKIT=1 docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/ServiceName:${{ github.sha }} --target prod .
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ServiceName:${{ github.sha }}

  terraform:
    name: 'Terraform'
    needs: build
    runs-on: ubuntu-latest

    # Add env variables for service principal
    env:
      # TF_LOG: TRACE
      TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: 'Terraform Setup'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: $ {{ secrets.TF_API_TOKEN }}
      - name: 'Terraform Format'
        run: terraform fmt -check ./terraform
      - name: 'Terraform Init'
        run: terraform init ./terraform
      - name: 'Terraform Plan'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          client_id: ${{ secrets.ARM_CLIENT_ID }}
          client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.ARM_TENANT_ID }}
        run: terraform plan ./terraform
      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'pull_request'
        run: terraform apply -auto-approve ./terraform
  staging:
    if: github.run_id != 'refs/heads/develop' &&  github.event_name == 'pull_request'
    needs: [terraform, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        resource-group: sociallme-k8s-aks-rg
        cluster-name: sociallme-k8s-aks
      id: login
    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v1
      with:
        #namespace: 'myapp'
        container-registry-url: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: acr-secret
        id: create-secret
    - name: Create k8s secret to use env    
      uses: azure/k8s-create-secret@v1
      with:
        namespace: default
        secret-type: generic
        arguments:
          --from-literal=SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          --from-literal=ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
          --from-literal=DATABASE_HOST=${{ secrets.POSTGRES_DATABASE_HOST }}
          --from-literal=DATABASE_USER=${{ secrets.POSTGRES_DATABASE_USER }}
          --from-literal=DATABASE_NAME=${{ secrets.POSTGRES_DATABASE_NAME }}
          --from-literal=DATABASE_PASSWORD=${{ secrets.POSTGRES_DATABASE_PASSWORD }}
          --from-literal=LOG_LEVEL=${{ secrets.DJANGO_LOG_LEVEL }}
          --from-literal=DEBUG=${{ secrets.DJANGO_DEBUG }}
          --from-literal=AZURE_ACCOUNT_NAME=${{ secrets.BLOB_AZURE_ACCOUNT_NAME }}
          --from-literal=AZURE_ACCOUNT_KEY=${{ secrets.BLOB_AZURE_ACCOUNT_KEY }}
          --from-literal=AZURE_CUSTOM_DOMAIN=${{ secrets.BLOB_AZURE_CUSTOM_DOMAIN }}
          --from-literal=AZURE_CONNECTION_STRING=${{ secrets.BLOB_AZURE_CONNECTION_STRING }}
        secret-name: env-secrets
    - name: 'Deploy Kubernetes Cluster'
      uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          ./kubernetes/deployment.yml
        images: |
          sociallmek8sacr.azurecr.io/ServiceName:${{ github.sha }}
        imagepullsecrets: |
          acr-secret
        kubectl-version: latest
